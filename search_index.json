[["index.html", ",          ", " ,           2021-07-12   .    .        .      ,         (  R),       House of Europe. :  ,  ,  ,   "],["chapter1.html", " 1     1.1   R? 1.2   R 1.3    R 1.4      R", "  1       R?   R    R R Project    R   R GUI        (help/?)   R Studio    RStudio Desktop     RStudio   Jupyter Notebook   IDE      R      R          RStudio 1.1   R? R         (DataScience)    (Machine Learning).      R    : ,  .    R       ,                       / .  ,    R   (free)     (open source). R    ,    :  .    ,   ,       .   .     ,       (, MS Excel), R                 .  . R    ,    ,           .    ,         , , caret  mlr. .              (deployment)          (pipeline).        -  , ,    (shiny, shinydashboard, flexdashboard, rmarkdown, knitr ),             . 1.2   R   R      S.   S     C.  S   1976   Bell Labs.  S         .    S-Plus,          Windows  Unix-,    .       R.  1993         ,    R ( ,   R   ,     S   ,      C,    B) (.. , .. , .. , .. , .. , .. , .. . 2012).    (Robert Gentelman  Ross Ihaka)        S,    S-Plus  , ,      ,  .     ,    S.       ,      R  ,        (),   , , ,     S-Plus  R.          R,          (SAS, Stata, SYSSTAT).           R                 ,  ,   ,   . 1.3    R 1.3.1 R Project R    ,     GNU General Public License. ,   R      : UNIX, Windows, MacOS (R Core Team 2020). 1.3.1.1    R     R      https://cran.r-project.org/.     R    .       Windows,            : . 1.1:  R.        install R for the first time: . 1.2:  R.     Download R 4.X.X for Windows,  4.X.X  R,        : . 1.3:  R.           .                . ,   Google Chrome     : . 1.4:  R.    Google Chrome             .                        ,    . 1.3.1.2   R GUI        C:\\Program Files\\R\\R-4.X.X.   R GUI (      R)     bin\\x64 ( i386,    32-  )    Rgui.exe.   R GUI  : . 1.5:    RGui GUI (Graphical User Interface) -          .   R Console   / R,   :               : . 1.6:     RGui  R GUI        -     R,         R.       R-. 1.3.1.3         /      .  R      ,    ,         ,         (               ).      var1, var2      : var1 &lt;- 10 var2 &lt;- sqrt(15) var1 ## [1] 10 var2 ## [1] 3.872983            ls(): ls() ## [1] &quot;var1&quot; &quot;var2&quot;            rm(). ,       rm(list = ls()),       / ,    : rm(list = c(&quot;var1&quot;)) ls() ## [1] &quot;var2&quot;  ,    ,    var2.   (image)         save.image(\"  .RData\"),      load(\"  .RData\"): # Clear workspace rm(list = ls()) # declare data a &lt;- 10 b &lt;- a + 15 # Save image to file save.image(&quot;tmp.RData&quot;) # Clear workspace rm(list = ls()) # load image to file load(&quot;tmp.RData&quot;) print(a) ## [1] 10 print(b) ## [1] 25   2    ,      .        ,       R    .RDS,    saveRDS(', file=\"_.rds\")  readRDS(file=\"_.rds\"). 1.3.1.4      -      ,      .        ,                 .     R      getwd().    RStudio   ,          : getwd() ## [1] &quot;E:/Repos/YuRa/r-science-dev&quot;          setwd().      getwd()      /.             ,                .      Windows   2- : / - ,    ; \\\\ - ,    .           (drive -  ): setwd(&quot;drive:/folder1/folder2/&quot;) setwd(&quot;drive:\\\\folder1\\\\folder2\\\\&quot;)                dir()  list.files(): dir() ## [1] &quot;_bookdown.yml&quot; &quot;_bookdown_files&quot; &quot;_output.yml&quot; ## [4] &quot;01-chapter1.Rmd&quot; &quot;01-chapter1_files&quot; &quot;01-intro_files&quot; ## [7] &quot;02-chapter2.Rmd&quot; &quot;02-chapter2_files&quot; &quot;03-chapter3.Rmd&quot; ## [10] &quot;04-chapter4.Rmd&quot; &quot;05-chapter5.Rmd&quot; &quot;06-chapter6.Rmd&quot; ## [13] &quot;07-chapter7.Rmd&quot; &quot;09-chapter9.Rmd&quot; &quot;10-references.Rmd&quot; ## [16] &quot;book.bib&quot; &quot;css&quot; &quot;data&quot; ## [19] &quot;favicon.ico&quot; &quot;images&quot; &quot;inc&quot; ## [22] &quot;index.md&quot; &quot;index.Rmd&quot; &quot;packages.bib&quot; ## [25] &quot;preamble.tex&quot; &quot;r-science.log&quot; &quot;r-science.rds&quot; ## [28] &quot;README.md&quot; &quot;render_commands&quot; &quot;render47586ef833c3.rds&quot; ## [31] &quot;RScience.Rproj&quot; &quot;sss.R&quot; &quot;tmp.R&quot; ## [34] &quot;tmp.RData&quot; list.files() ## [1] &quot;_bookdown.yml&quot; &quot;_bookdown_files&quot; &quot;_output.yml&quot; ## [4] &quot;01-chapter1.Rmd&quot; &quot;01-chapter1_files&quot; &quot;01-intro_files&quot; ## [7] &quot;02-chapter2.Rmd&quot; &quot;02-chapter2_files&quot; &quot;03-chapter3.Rmd&quot; ## [10] &quot;04-chapter4.Rmd&quot; &quot;05-chapter5.Rmd&quot; &quot;06-chapter6.Rmd&quot; ## [13] &quot;07-chapter7.Rmd&quot; &quot;09-chapter9.Rmd&quot; &quot;10-references.Rmd&quot; ## [16] &quot;book.bib&quot; &quot;css&quot; &quot;data&quot; ## [19] &quot;favicon.ico&quot; &quot;images&quot; &quot;inc&quot; ## [22] &quot;index.md&quot; &quot;index.Rmd&quot; &quot;packages.bib&quot; ## [25] &quot;preamble.tex&quot; &quot;r-science.log&quot; &quot;r-science.rds&quot; ## [28] &quot;README.md&quot; &quot;render_commands&quot; &quot;render47586ef833c3.rds&quot; ## [31] &quot;RScience.Rproj&quot; &quot;sss.R&quot; &quot;tmp.R&quot; ## [34] &quot;tmp.RData&quot; 1.3.1.5  (help/?)      R    help(_'__)  ?_'__: # Get help for intersect() function help(intersect)        : help(package = &quot;stats&quot;) 1.3.2   R Studio 1.3.2.1    RStudio Desktop RStudio -      R.     ,   (),   ,    , html-,   ,  ,   ,       . RStudio          Windows, Linux  Mac,   -    Linux RStudio Server  RStudio Server Pro (RStudio Official Website 2021). IDE (integrated development environment) -       . ,     ,       .        . Wikipedia      https://rstudio.com.   ,            :      Products &gt; RStudio.        RStudio Desktop  Open Source   DOWNLOAD RSTUDIO DESKTOP: . 1.7:   RStudio Desktop      RStudio Desktop   : . 1.8:  RStudio Desktop     RStudio.      .   IDE RStudio    3-  4- : * ,     ( ). *        ( ). *   (Environment) ( ) +   (History),     , ,   (Connections),   (Tutorial). *     (Files),   (Packages),  (Help),   (Plots, Viewer). . 1.9:   RStudio Desktop        2  : . 1.10:     RStudio Desktop     data &lt;- c(3,7,1,6,3,4,5,4,2)     .  ,    Environments   ,       (   ).   plot(data, type=\"l\")      (type=\"l\" - linear, \"p\" - point, help(plot)  ). ,        Plots.          ,     html/css/js,       View.     History,       .          (Console)    Up/Down  : 1.3.2.2     RStudio {chapter1322}    R Gui  RStudio   ,             .    .        File &gt; New Project.        New Directory.   ,               . . 1.11: RStudio Desktop.       New Project: . 1.12: RStudio Desktop.  .      Create Project       .              ,     .       *.Rproj   Windows. . 1.13: RStudio Desktop.         R      File &gt; New file &gt; R Script    Ctrl+Shift+N.       Untitled[X],     , ,  TestCode.R      :  ,     20-     [1;5],     ,        (      ).    20-     [1;5]   : vtr &lt;- sample(1:5, 20, replace=TRUE) vtr ## [1] 4 3 4 4 1 3 4 2 3 2 2 5 3 2 1 5 1 1 3 3       ,            .    set.seed(  - ). P.S.     ,   set.seed()  R  4+     3+.      .           : vtr_sum &lt;- sum(vtr) vtr_mean &lt;- mean(vtr) print(paste0(&quot;Sum: &quot;, vtr_sum)) ## [1] &quot;Sum: 56&quot; print(paste0(&quot;Mean: &quot;, vtr_mean)) ## [1] &quot;Mean: 2.8&quot;  : hist(vtr, breaks = 5) . 1.14:     R .     hist()   : https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist.    RStudio         : . 1.15: RStudio Desktop.         Environment,      ,       '.            ,  .       . 1.3.3   Jupyter Notebook         ,        .      ,       ,         . _*.        ._           ,   ,         .            .      Anaconda (       Data Science)  Jupyter Notebook  .    Anaconda          : https://www.anaconda.com/products/individual (Anaconda. The Worlds Most Popular Data Science Platform 2021). _*.          Windows 10 Education_.    Anaconda         Windows.   Anaconda Navigator          R: Anaconda       Environments   Create: . 1.16: Anaconda.    ,     [x]      R: . 1.17: Anaconda.      R   R-     Home   : . 1.18: Anaconda.        Launch   Jupyter Notebook    . Jupyter Notebook        .      ,       New &gt; Notebook &gt; R: . 1.19: Jupyter Notebook.    1.3.4   IDE      R         ,       R-.   . Visual Studio Code -     Microsoft,         (Visual Studio Code 2021).     VS Code       R: . 1.20: Visual Studio Code.  RTools Visual Studio Community Edition -      Microsoft. VS         .NET    C#, VB.NET, F# ,      ,     ,      R (Visual Studio Community Edition 2021). Google Collab -        Data Science   Google (Google Colaboratory 2021): . 1.21: Google Collab .       Python. kaggle.com -     Data Science  Machine Learning.   ,       . . 1.22: Kaggle.com        R       ,            . 1.4      R 1.4.1        R ,   ,             .        ,      .   R -               R.          ,       .         cran.r-project.org / (R Core Team 2020)    (dev-    github).    R      ,       .      install.packages(): install.packages(&quot;fun&quot;)         library(): packageDescription(&quot;fun&quot;) help(package = &quot;fun&quot;)          DataCamp: R Packages: A Beginners Guide. 1.4.2     RStudio     RStudio            ,    .         Tools: . 1.23: RStudio Desktop.      Install Packages...  ,             ,      : . 1.24: RStudio Desktop.     RStudio     /,        (   ): . 1.25: RStudio Desktop.               _::_()      library(): . 1.26: RStudio Desktop.    fun       ,           . e "],["chapter2.html", " 2    R:    .  1  2.1     2.2    2.3  2.4    2.5 - ", "  2    R:    .  1                   R                 (round, ceiling, floor, trunc, signif)   (seq, rep)         R -  2.1     2.1.1             .            , ,   . ,   my_variable  10  : my_variable &lt;- 5  my_variable = 5.         . !  ,   (&lt;-, =)   (==)   .  ==      /        TRUE (  )  FALSE (   ).  &lt;-        ,     =.   R        &lt;-.     R    &lt;&lt;-, -&gt;, -&gt;&gt;.       .         R &lt;-  = : Why do we use arrow as an assignment operator? (Colin FAY). Difference between assignment operators in R (Ren Kun). Assignment Operators. : x &lt;- 45 y &lt;- 10 z &lt;- x + y # z = 45 + 10 z ## [1] 55  ,  :      x     45.      y     10.      z      x + y. #  R    ,     .         z. 2.1.2           R: 1.       [a-z, A-z],  [0-9],  .    _. 2.        .     ,      . 3.           , , TRUE/FALSE.       (space).       ,      _   .. ,    my_variable_name  my.variable.name.  myVariableName (camel case)       R,       .    : total, zminna, Sum, .length_of_something, Number123, x_1.    : tot@l, 5x_1, _variable, FALSE, .0ne. 2.2    2.2.1   R          .   -       ,     . , ,        ,   .   (  )        ,  (       ),     .  R,       ,              .       C# (   C/Java): int a = 10; a = &quot;some text&quot;;    C#     a  int (integer -  ),      a   ( string  #).         .     R: a &lt;- 10 a &lt;- &quot;some text&quot; a ## [1] &quot;some text&quot;         some text,   1      ,   - .   R   ,           .   ,     .      R  :     (decimal numbers),  , 4.0, 15.214,   numeric(s).   (natural numbers),  , 4, 15,   integer(s).   (boolean values),  TRUE  FALSE (     T  F),   logical.    (string values),  , \"Hello\", \"12 is number\",   character(s).     : my_numeric - , my_character - , my_logical -  . my_numeric &lt;- 5 my_character &lt;- &quot;universe&quot; my_logical &lt;- FALSE   my_character &lt;- \"5\"     : my_character &lt;- &quot;5&quot; my_sum &lt;- my_numeric + my_character        ,   5  \"5\"     ,      class(): class(5) ## [1] &quot;numeric&quot; class(&quot;5&quot;) ## [1] &quot;character&quot;   class(5)  ,  5     numeric,  class(\"5\")   character,        . 2.2.2                /       .    -         .  ,         . , ,  \"5\" (character)      5 (numeric),  \"five\"     .            is._().    TRUE,       FALSE,   .  : my_numeric &lt;- 5 my_character &lt;- &quot;five&quot; my_logical &lt;- FALSE is.numeric(my_numeric) ## [1] TRUE is.character(my_numeric) ## [1] FALSE        as._().             NA,      : a &lt;- 5 b &lt;- &quot;10&quot; c &lt;- &quot;10, 20&quot; as.numeric(b) ## [1] 10 as.numeric(c) ## Warning: NAs introduced by coercion ## [1] NA            : a &lt;- 5 b &lt;- &quot;10&quot; b &lt;- as.numeric(b) a + b ## [1] 15 number &lt;- as.integer(54) typeof(number) ## [1] &quot;integer&quot; class(number) ## [1] &quot;integer&quot;            :         Array is.array as.array Character is.character as.character Complex is.complex as.complex Dataframe is.data.frame as.data.frame Double is.double as.double Factor is.factor as.factor List is.list as.list Logical is.logical as.logical Matrix is.matrix as.matrix Numeric is.numeric as.numeric Raw is.raw as.raw Time series (ts) is.ts as.ts Vector is.vector as.vector 2.3  2.3.1   R     .     ,     : * : +. * : -. * : /. * : *.     : *   : ^ (    Shift+6  ENG- ). *    (     ): %% (    Shift+5). *  : %/%.    : 5 + 10 ## [1] 15 5 + 4 + 15 ## [1] 24 5 + 53 + 343 ## [1] 401 (5 + 8) + (4 + 9) ## [1] 26 .             .    : 47 - 21 ## [1] 26 15 - (10 - 25) ## [1] 30 .   /          :)   : 5 * 3 ## [1] 15 5 * (2 + 5) ## [1] 35   : 12 / 2 ## [1] 6 (4 + 7) / 3 ## [1] 3.666667       ^   . , , 3^2  9,  2^3 -  2*2*2   8. 5^2 ## [1] 25 (1+3)^3 + 100 ## [1] 164             . ,     5  2  1,  2 * 2 (=4) + 1 = 5 28 %% 7 ## [1] 0 17%%5 ## [1] 2         : 28 %/% 7 ## [1] 4 17 %/% 5 ## [1] 3 Sys.setlocale(&quot;LC_CTYPE&quot;, &quot;ukrainian&quot;) ## [1] &quot;Ukrainian_Ukraine.1251&quot; #        ,            R            .     ,    .         : Sys.setlocale(&quot;LC_CTYPE&quot;, &quot;ukrainian&quot;) 2.3.2                 TRUE,     FALSE,   .   :    &gt;=.  &lt;.    &lt;=.  ==.   !=        3  a, b  c. a &lt;- 12 b &lt;- 5 c &lt;- 7       . ,      /: a &gt; b ## [1] TRUE b + c &lt; a ## [1] FALSE b + c &lt;= a ## [1] TRUE ,      /: a != b ## [1] TRUE a == b + c ## [1] TRUE b == c ## [1] FALSE 2.3.3       R :  &amp; (, Shift-7) -    .  | ( , Shift+\\) -    .  ! ( , Shift+1) - .           .      : A B      A ( A) FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE TRUE FALSE FALSE TRUE FALSE TRUE TRUE TRUE TRUE FALSE     . 2.4    2.4.1   (round, ceiling, floor, trunc, signif)     ,     ,     ,     5 (3.6     4,  3.2  3,  3.5 ). !           .                 .  round()   .        () (   ).     (  )   &lt;0.5 &amp; &gt;=0.5 (    )   round(x, y),  x - , y -  (   /). : round(3.557, 2) ## [1] 3.56 round(3.241, 2) ## [1] 3.24 round(-3.557, 2) ## [1] -3.56 round(-3.241, 2) ## [1] -3.24    round(x)   ,      , : round(124.345) ## [1] 124  floor()           floor(): floor(3.557) ## [1] 3 floor(3.241) ## [1] 3 floor(-3.557) ## [1] -4 floor(-3.241) ## [1] -4  ceiling()           ceiling(): ceiling(3.557) ## [1] 4 ceiling(3.241) ## [1] 4 ceiling(-3.557) ## [1] -3 ceiling(-3.241) ## [1] -3  trunc()  trunc()  R      ,     x.    ,     0 (x &lt; 0) trunc()   celing(),      x &gt; 0,  floor(): x &lt;- 5.34 print(paste(&quot;trunc:&quot;, trunc(x), &quot;celing:&quot;, ceiling(x), &quot;floor:&quot;, floor(x), sep = &quot; &quot;)) ## [1] &quot;trunc: 5 celing: 6 floor: 5&quot; x &lt;- x * -1 print(paste(&quot;trunc:&quot;, trunc(x), &quot;celing:&quot;, ceiling(x), &quot;floor:&quot;, floor(x), sep = &quot; &quot;)) ## [1] &quot;trunc: -5 celing: -5 floor: -6&quot;  signif()        ,  , ,    .  ,       11 547 741.3        11.5        signif(x,y),  x - ,      , y -   (  ). : big_number &lt;- 11547741.3 rounded_big_number &lt;- signif(big_number,3) rounded_big_number ## [1] 11500000 rounded_big_number / 1000000 ## [1] 11.5 2.4.2   (seq, rep)     . 2.4.3        . runif(10) ## [1] 0.8759541 0.5835045 0.8261794 0.3332323 0.8961665 0.1006471 0.3719385 ## [8] 0.7681554 0.7873050 0.8701167 sample(100) ## [1] 57 66 100 9 44 23 71 13 83 63 95 12 89 34 1 97 8 24 ## [19] 84 41 67 10 46 60 72 36 98 20 49 99 59 40 81 29 30 78 ## [37] 47 64 77 94 80 32 15 21 5 92 48 75 37 88 54 87 19 93 ## [55] 14 65 25 79 6 55 4 56 62 43 74 27 38 22 35 73 91 90 ## [73] 85 52 39 68 26 51 31 82 42 7 53 70 86 45 2 11 50 16 ## [91] 17 58 18 3 69 61 96 76 33 28 2.4.4      R      R          , ,  .        ,          help()  ?name.     ,           .  ,  log(x)   x   e log(x,n)   x   n exp(x) e   x sqrt(x)    x factorial(x)   x abs(x)   x   R    ,       ,   cos(x), sin(x), tan(x),   acos(x), asin(x), atan(x), acosh(x), asinh(x), atanh(x).             help(function). 2.5 -      . "],["chapter3.html", " 3    R:    .  2  3.1   3.2  (vectors)", "  3    R:    .  2     (vectors)          3.1       . 3.2  (vectors) 3.2.1           .     -    .      ,   -     ,      ().   ,  x = (x1, x2,, xn),   -  , n -   , 3.2.2    -     R,          c()   ,    . .    c()    .      x: x &lt;- 10    x     ,      10.         x: x &lt;- c(1, 2, 2.5, 3) x ## [1] 1.0 2.0 2.5 3.0        : numeric, character, logical : v1 &lt;- c(1, 3, 4, 6, 7) v2 &lt;- c(T, F, F, T, F) v3 &lt;- c(&quot;Hello&quot;, &quot;my&quot;, &quot;friend&quot;, &quot;!&quot;)    ,      rep(), seq()   :: vtr &lt;- 2:7 vtr ## [1] 2 3 4 5 6 7 vtr &lt;- 7:2 vtr ## [1] 7 6 5 4 3 2      ,   c(): x &lt;- 2:3 y &lt;- c(4,6,9) z &lt;- c(x, y, 10:12, 100) z ## [1] 2 3 4 6 9 10 11 12 100           summary(): summary(z) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2.00 4.00 9.00 17.44 11.00 100.00 3.2.3    "],["chapter4.html", " 4 4.       : , -,  R  4.1     4.2    Telecom Users 4.3    RStudio 4.4 CSV-: ,  4.5 Excel (xlsx): ,  4.6 XML: ,  4.7 JSON and API 4.8 Google Services 4.9 SQL (SQLite sample) 4.10 Web-pages (HTML)", "  4 4.       : , -,  R         TelecomUsers CSV: ,    Excel (xlsx): ,    XML: ,    [JSON and API: , ] (#chapter46) Google Services Spreadsheets Trends SQL (SQLite sample) 4.1         .  ,         3 :         ,          ,    .        ,       ,   .       ,          .       , ,  Microsoft Excel,    -   ,    -   .                 .       ,   ,      .   4.2    Telecom Users         kaggle.com.      https://www.kaggle.com/radmirzosimov/telecom-users-dataset. :            . : Any business wants to maximize the number of customers. To achieve this goal, it is important not only to try to attract new ones, but also to retain existing ones. Retaining a client will cost the company less than attracting a new one. In addition, a new client may be weakly interested in business services and it will be difficult to work with him, while old clients already have the necessary data on interaction with the service. Accordingly, predicting the churn, we can react in time and try to keep the client who wants to leave. Based on the data about the services that the client uses, we can make him a special offer, trying to change his decision to leave the operator. This will make the task of retention easier to implement than the task of attracting new users, about which we do not know anything yet. You are provided with a dataset from a telecommunications company. The data contains information about almost six thousand users, their demographic characteristics, the services they use, the duration of using the operators services, the method of payment, and the amount of payment. The task is to analyze the data and predict the churn of users (to identify people who will and will not renew their contract). The work should include the following mandatory items: Description of the data (with the calculation of basic statistics); Research of dependencies and formulation of hypotheses; Building models for predicting the outflow (with justification for the choice of a particular model) 4. based on tested hypotheses and identified relationships; Comparison of the quality of the obtained models.    : customerID - customer id gender - client gender (male / female) SeniorCitizen - is the client retired (1, 0) Partner - is the client married (Yes, No) tenure - how many months a person has been a client of the company PhoneService - is the telephone service connected (Yes, No) MultipleLines - are multiple phone lines connected (Yes, No, No phone service) InternetService - clients Internet service provider (DSL, Fiber optic, No) OnlineSecurity - is the online security service connected (Yes, No, No internet service) OnlineBackup - is the online backup service activated (Yes, No, No internet service) DeviceProtection - does the client have equipment insurance (Yes, No, No internet service) TechSupport - is the technical support service connected (Yes, No, No internet service) StreamingTV - is the streaming TV service connected (Yes, No, No internet service) StreamingMovies - is the streaming cinema service activated (Yes, No, No internet service) Contract - type of customer contract (Month-to-month, One year, Two year) PaperlessBilling - whether the client uses paperless billing (Yes, No) PaymentMethod - payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)) MonthlyCharges - current monthly payment TotalCharges - the total amount that the client paid for the services for the entire time Churn - whether there was a churn (Yes or No) 4.3    RStudio RStudio     4.4 CSV-: ,  CSV -   ,      (Comma Separated Values). CSV          ,           . .       CSV-.      . # lets check current working directory to write correct files path getwd() ## [1] &quot;E:/Repos/YuRa/r-science-dev&quot; You can use / or \\ for writing correct path in R. For example: path = &quot;d:/projects/file.csv&quot; path = &quot;d:\\\\projects\\\\file.csv&quot; To combine path use paste() or paste0() functions work_dir = getwd() work_dir ## [1] &quot;E:/Repos/YuRa/r-science-dev&quot; file_name = &quot;temp_file.csv&quot; file_path = paste0(work_dir, &quot;/&quot;, file_name) file_path ## [1] &quot;E:/Repos/YuRa/r-science-dev/temp_file.csv&quot; file_path = paste(work_dir, file_name, sep = &quot;/&quot;) file_path ## [1] &quot;E:/Repos/YuRa/r-science-dev/temp_file.csv&quot; Thare are few methods for reading/writing csv in base package: read.csv(), write.csv - default data separator is ,, decimal is separator .. read.csv2(), write.csv2 - default data separator is ;, decimal is separator ,. Before using any new function check it usage information with help(function_name) or ?function_name,example:?read.csv`. You can read (current data set has NA values as example, there are no NA in original datase): data &lt;- read.csv2(&quot;data/telecom_users.csv&quot;) # default reading data &lt;- read.csv2(&quot;data/telecom_users.csv&quot;, sep = &quot;,&quot;, # comma not only possibel separator dec = &quot;.&quot;, # decimal separator can be different na.strings = c(&quot;&quot;, &quot;NA&quot;, &quot;NULL&quot;)) # you can define NA values str(data) # chack data structure / types/ values ## &#39;data.frame&#39;: 5986 obs. of 22 variables: ## $ X : int 1869 4528 6344 6739 432 2215 5260 6001 1480 5137 ... ## $ customerID : chr &quot;7010-BRBUU&quot; &quot;9688-YGXVR&quot; &quot;9286-DOJGF&quot; &quot;6994-KERXL&quot; ... ## $ gender : chr &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; &quot;Male&quot; ... ## $ SeniorCitizen : int 0 0 1 0 0 0 0 0 0 1 ... ## $ Partner : chr &quot;Yes&quot; &quot;No&quot; &quot;Yes&quot; &quot;No&quot; ... ## $ Dependents : chr &quot;Yes&quot; &quot;No&quot; &quot;No&quot; &quot;No&quot; ... ## $ tenure : int 72 44 38 4 2 70 33 1 39 55 ... ## $ PhoneService : chr &quot;Yes&quot; &quot;Yes&quot; &quot;Yes&quot; &quot;Yes&quot; ... ## $ MultipleLines : chr &quot;Yes&quot; &quot;No&quot; &quot;Yes&quot; &quot;No&quot; ... ## $ InternetService : chr &quot;No&quot; &quot;Fiber optic&quot; &quot;Fiber optic&quot; &quot;DSL&quot; ... ## $ OnlineSecurity : chr &quot;No internet service&quot; &quot;No&quot; &quot;No&quot; &quot;No&quot; ... ## $ OnlineBackup : chr &quot;No internet service&quot; &quot;Yes&quot; &quot;No&quot; &quot;No&quot; ... ## $ DeviceProtection: chr &quot;No internet service&quot; &quot;Yes&quot; &quot;No&quot; &quot;No&quot; ... ## $ TechSupport : chr &quot;No internet service&quot; &quot;No&quot; &quot;No&quot; &quot;No&quot; ... ## $ StreamingTV : chr &quot;No internet service&quot; &quot;Yes&quot; &quot;No&quot; &quot;No&quot; ... ## $ StreamingMovies : chr &quot;No internet service&quot; &quot;No&quot; &quot;No&quot; &quot;Yes&quot; ... ## $ Contract : chr &quot;Two year&quot; &quot;Month-to-month&quot; &quot;Month-to-month&quot; &quot;Month-to-month&quot; ... ## $ PaperlessBilling: chr &quot;No&quot; &quot;Yes&quot; &quot;Yes&quot; &quot;Yes&quot; ... ## $ PaymentMethod : chr &quot;Credit card (automatic)&quot; &quot;Credit card (automatic)&quot; &quot;Bank transfer (automatic)&quot; &quot;Electronic check&quot; ... ## $ MonthlyCharges : num 24.1 88.2 75 55.9 53.5 ... ## $ TotalCharges : num 1735 3973 2870 238 120 ... ## $ Churn : chr &quot;No&quot; &quot;No&quot; &quot;Yes&quot; &quot;No&quot; ... head(data) # top 6 rows, use n = X, for viewing top X lines ## X customerID gender SeniorCitizen Partner Dependents tenure PhoneService ## 1 1869 7010-BRBUU Male 0 Yes Yes 72 Yes ## 2 4528 9688-YGXVR Female 0 No No 44 Yes ## 3 6344 9286-DOJGF Female 1 Yes No 38 Yes ## 4 6739 6994-KERXL Male 0 No No 4 Yes ## 5 432 2181-UAESM Male 0 No No 2 Yes ## 6 2215 4312-GVYNH Female 0 Yes No 70 No ## MultipleLines InternetService OnlineSecurity OnlineBackup ## 1 Yes No No internet service No internet service ## 2 No Fiber optic No Yes ## 3 Yes Fiber optic No No ## 4 No DSL No No ## 5 No DSL Yes No ## 6 No phone service DSL Yes No ## DeviceProtection TechSupport StreamingTV ## 1 No internet service No internet service No internet service ## 2 Yes No Yes ## 3 No No No ## 4 No No No ## 5 Yes No No ## 6 Yes Yes No ## StreamingMovies Contract PaperlessBilling PaymentMethod ## 1 No internet service Two year No Credit card (automatic) ## 2 No Month-to-month Yes Credit card (automatic) ## 3 No Month-to-month Yes Bank transfer (automatic) ## 4 Yes Month-to-month Yes Electronic check ## 5 No Month-to-month No Electronic check ## 6 Yes Two year Yes Bank transfer (automatic) ## MonthlyCharges TotalCharges Churn ## 1 24.10 1734.65 No ## 2 88.15 3973.20 No ## 3 74.95 2869.85 Yes ## 4 55.90 238.50 No ## 5 53.45 119.50 No ## 6 49.85 3370.20 No is.data.frame(data) # if data is data.frame ## [1] TRUE any(is.na(data)) # if dataframe contains any NA values ## [1] TRUE apply(is.na(data), 2, any) #check NA by 2nd dimension - columns ## X customerID gender SeniorCitizen ## FALSE FALSE FALSE FALSE ## Partner Dependents tenure PhoneService ## FALSE FALSE FALSE FALSE ## MultipleLines InternetService OnlineSecurity OnlineBackup ## FALSE FALSE FALSE FALSE ## DeviceProtection TechSupport StreamingTV StreamingMovies ## FALSE FALSE FALSE FALSE ## Contract PaperlessBilling PaymentMethod MonthlyCharges ## FALSE FALSE FALSE TRUE ## TotalCharges Churn ## TRUE FALSE Check MonthlyCharges: TRUE and TotalCharges: TRUE. These columns has NA-values. Lets replace them with mean: data[is.na(data$TotalCharges), &quot;TotalCharges&quot;] &lt;- mean(data$TotalCharges, na.rm = T) data[is.na(data$MonthlyCharges), &quot;MonthlyCharges&quot;] &lt;- mean(data$MonthlyCharges, na.rm = T) any(is.na(data)) # check for NA ## [1] FALSE You can write data with write.csv(), write.csv2() from base package. write.csv(data, file = &quot;data/cleaned_data.csv&quot;, row.names = F) # by default row.names = TRUE and file will contains first columns with row numbers 1,2, ..., N One more useful package is readr. Examples of using: #install.packages(readr) library(readr) data &lt;- read_csv(file = &quot;data/telecom_users.csv&quot;,  ) data &lt;- read_csv2(file = &quot;data/telecom_users.csv&quot;,  ) 4.5 Excel (xlsx): ,  There are many packages to read/write MS Excel files. xlsx one of the most useful. #install.packages(&quot;xlsx&quot;) install before use it library(xlsx) any(grepl(&quot;xlsx&quot;, installed.packages())) # check if package installed ## [1] TRUE ?read.xlsx - review package functions and params Lets read the data telecom_users.xlsx: data &lt;- read.xlsx(&quot;data/telecom_users.xlsx&quot;, sheetIndex = 1) # sheetIndex = 1 - select sheet to read, or use sheetName = &quot;sheet1&quot; to read by Name # You can also use startRow, endRow and other params to define how mutch data read data &lt;- read.xlsx(&quot;data/telecom_users.xlsx&quot;, sheetIndex = 1, endRow = 100) Lets replace Churn values Yes/No by 1/0: head(data$Churn) ## [1] &quot;No&quot; &quot;No&quot; &quot;Yes&quot; &quot;No&quot; &quot;No&quot; &quot;No&quot; data$Churn &lt;- ifelse(data$Churn == &quot;Yes&quot;, 1, 0) head(data$Churn) ## [1] 0 0 1 0 0 0 Write final data to csv: write.xlsx(data, file = &quot;data/final_telecom_data.xlsx&quot;) 4.5.1 Task 2.1 Download from kaggle.com and read dataset Default_Fin.csv: https://www.kaggle.com/kmldas/loan-default-prediction Description: This is a synthetic dataset created using actual data from a financial institution. The data has been modified to remove identifiable features and the numbers transformed to ensure they do not link to original source (financial institution). This is intended to be used for academic purposes for beginners who want to practice financial analytics from a simple financial dataset. Index - This is the serial number or unique identifier of the loan taker Employed - This is a Boolean 1= employed 0= unemployed Bank.Balance - Bank Balance of the loan taker Annual.Salary - Annual salary of the loan taker Defaulted - This is a Boolean 1= defaulted 0= not defaulted Check what columns has missing values Count default and non-default clients / and parts of total clients in % Count Employed clients Count Employed Default clients Average salary by Employed clients Rename columns to id, empl, balance, salary, default 4.5.2 Solution for Task 2.1 data &lt;- read.csv(&quot;data/Default_Fin.csv&quot;) head(data) ## Index Employed Bank.Balance Annual.Salary Defaulted. ## 1 1 1 8754.36 532339.56 0 ## 2 2 0 9806.16 145273.56 0 ## 3 3 1 12882.60 381205.68 0 ## 4 4 1 6351.00 428453.88 0 ## 5 5 1 9427.92 461562.00 0 ## 6 6 0 11035.08 89898.72 0 Check what columns has missing values any(is.na(data)) ## [1] FALSE Count default and non-default clients / and parts of total clients in % def_count &lt;- nrow(data[data$Defaulted. == 1, ]) no_def_count &lt;- nrow(data[data$Defaulted. == 0, ]) def_count ## [1] 333 no_def_count ## [1] 9667 def_count / nrow(data) * 100 # part defaults ## [1] 3.33 no_def_count / nrow(data) * 100 # part non-defaults ## [1] 96.67 Count Employed clients empl &lt;- data[data$Employed == 1, ] nrow(empl) ## [1] 7056 Count Employed Default clients empl &lt;- data[data$Employed == 1 &amp; data$Defaulted. == 1, ] nrow(empl) ## [1] 206 Average salary by Employed clients empl &lt;- data[data$Employed == 1, ] mean(empl$Annual.Salary) ## [1] 480143.4 Rename columns to id, empl, balance, salary, default: colnames(data) &lt;- c(&quot;id&quot;, &quot;empl&quot;, &quot;balance&quot;, &quot;salary&quot;, &quot;default&quot;) head(data) ## id empl balance salary default ## 1 1 1 8754.36 532339.56 0 ## 2 2 0 9806.16 145273.56 0 ## 3 3 1 12882.60 381205.68 0 ## 4 4 1 6351.00 428453.88 0 ## 5 5 1 9427.92 461562.00 0 ## 6 6 0 11035.08 89898.72 0 4.6 XML: ,  XML - eXtensible Markup Language. For our example we will use data from data/employes.xml. File contains records with info: &lt;RECORDS&gt; &lt;EMPLOYEE&gt; &lt;ID&gt;1&lt;/ID&gt; &lt;NAME&gt;Rick&lt;/NAME&gt; &lt;SALARY&gt;623.3&lt;/SALARY&gt; &lt;STARTDATE&gt;1/1/2012&lt;/STARTDATE&gt; &lt;DEPT&gt;IT&lt;/DEPT&gt; &lt;/EMPLOYEE&gt; ... &lt;/RECORDS&gt; #install.packages(&quot;XML&quot;) library(&quot;XML&quot;) #install.packages(&quot;methods&quot;) library(&quot;methods&quot;) result &lt;- xmlParse(file = &quot;data/employes.xml&quot;) print(result) ## &lt;?xml version=&quot;1.0&quot;?&gt; ## &lt;RECORDS&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;1&lt;/ID&gt; ## &lt;NAME&gt;Rick&lt;/NAME&gt; ## &lt;SALARY&gt;623.3&lt;/SALARY&gt; ## &lt;STARTDATE&gt;1/1/2012&lt;/STARTDATE&gt; ## &lt;DEPT&gt;IT&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;2&lt;/ID&gt; ## &lt;NAME&gt;Dan&lt;/NAME&gt; ## &lt;SALARY&gt;515.2&lt;/SALARY&gt; ## &lt;STARTDATE&gt;9/23/2013&lt;/STARTDATE&gt; ## &lt;DEPT&gt;Operations&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;3&lt;/ID&gt; ## &lt;NAME&gt;Michelle&lt;/NAME&gt; ## &lt;SALARY&gt;611&lt;/SALARY&gt; ## &lt;STARTDATE&gt;11/15/2014&lt;/STARTDATE&gt; ## &lt;DEPT&gt;IT&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;4&lt;/ID&gt; ## &lt;NAME&gt;Ryan&lt;/NAME&gt; ## &lt;SALARY&gt;729&lt;/SALARY&gt; ## &lt;STARTDATE&gt;5/11/2014&lt;/STARTDATE&gt; ## &lt;DEPT&gt;HR&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;5&lt;/ID&gt; ## &lt;NAME&gt;Gary&lt;/NAME&gt; ## &lt;SALARY&gt;843.25&lt;/SALARY&gt; ## &lt;STARTDATE&gt;3/27/2015&lt;/STARTDATE&gt; ## &lt;DEPT&gt;Finance&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;6&lt;/ID&gt; ## &lt;NAME&gt;Nina&lt;/NAME&gt; ## &lt;SALARY&gt;578&lt;/SALARY&gt; ## &lt;STARTDATE&gt;5/21/2013&lt;/STARTDATE&gt; ## &lt;DEPT&gt;IT&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;7&lt;/ID&gt; ## &lt;NAME&gt;Simon&lt;/NAME&gt; ## &lt;SALARY&gt;632.8&lt;/SALARY&gt; ## &lt;STARTDATE&gt;7/30/2013&lt;/STARTDATE&gt; ## &lt;DEPT&gt;Operations&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;8&lt;/ID&gt; ## &lt;NAME&gt;Guru&lt;/NAME&gt; ## &lt;SALARY&gt;722.5&lt;/SALARY&gt; ## &lt;STARTDATE&gt;6/17/2014&lt;/STARTDATE&gt; ## &lt;DEPT&gt;Finance&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; ## &lt;/RECORDS&gt; ## rootnode &lt;- xmlRoot(result) # reading rootnode of xml document rootnode[[1]] # reading first record ## &lt;EMPLOYEE&gt; ## &lt;ID&gt;1&lt;/ID&gt; ## &lt;NAME&gt;Rick&lt;/NAME&gt; ## &lt;SALARY&gt;623.3&lt;/SALARY&gt; ## &lt;STARTDATE&gt;1/1/2012&lt;/STARTDATE&gt; ## &lt;DEPT&gt;IT&lt;/DEPT&gt; ## &lt;/EMPLOYEE&gt; rootnode[[1]][[2]] # reading first record in root node and second tag, its &lt;NAME&gt; ## &lt;NAME&gt;Rick&lt;/NAME&gt; xmldataframe &lt;- xmlToDataFrame(&quot;data/employes.xml&quot;) xmldataframe ## ID NAME SALARY STARTDATE DEPT ## 1 1 Rick 623.3 1/1/2012 IT ## 2 2 Dan 515.2 9/23/2013 Operations ## 3 3 Michelle 611 11/15/2014 IT ## 4 4 Ryan 729 5/11/2014 HR ## 5 5 Gary 843.25 3/27/2015 Finance ## 6 6 Nina 578 5/21/2013 IT ## 7 7 Simon 632.8 7/30/2013 Operations ## 8 8 Guru 722.5 6/17/2014 Finance 4.7 JSON and API JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language Standard. API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. One of the most popular packages for json is jsonlite. #install.packages(&quot;jsonlite&quot;) library(jsonlite) Lets use readinginformation about BTC and USDT crypro currencies from Binance market = &#39;BTCUSDT&#39; interval = &#39;1h&#39; limit = 100 url &lt;- paste0(url = &quot;https://api.binance.com/api/v3/klines?symbol=&quot;, market ,&quot;&amp;interval=&quot;, interval,&quot;&amp;limit=&quot;, limit) print(url) # complete request URL ## [1] &quot;https://api.binance.com/api/v3/klines?symbol=BTCUSDT&amp;interval=1h&amp;limit=100&quot; On the nex stage you need use fromJSON() function to get data. More details about requests to Binanace at https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#klinecandlestick-data If you enter url value at browser response is going to be like this: [ [ 1499040000000, // Open time &quot;0.01634790&quot;, // Open &quot;0.80000000&quot;, // High &quot;0.01575800&quot;, // Low &quot;0.01577100&quot;, // Close &quot;148976.11427815&quot;, // Volume 1499644799999, // Close time &quot;2434.19055334&quot;, // Quote asset volume 308, // Number of trades &quot;1756.87402397&quot;, // Taker buy base asset volume &quot;28.46694368&quot;, // Taker buy quote asset volume &quot;17928899.62484339&quot; // Ignore. ] ] data &lt;- fromJSON(url) # get json and transform it to list() data &lt;- data[, 1:7] # let&#39;s left only 1:7 columns (from Open time to Close time) head(data) ## [,1] [,2] [,3] [,4] ## [1,] &quot;1.625724e+12&quot; &quot;32880.97000000&quot; &quot;33512.53000000&quot; &quot;32857.09000000&quot; ## [2,] &quot;1625727600000&quot; &quot;33096.85000000&quot; &quot;33260.80000000&quot; &quot;32242.07000000&quot; ## [3,] &quot;1625731200000&quot; &quot;32487.56000000&quot; &quot;32618.25000000&quot; &quot;32231.92000000&quot; ## [4,] &quot;1625734800000&quot; &quot;32570.54000000&quot; &quot;32700.00000000&quot; &quot;32425.20000000&quot; ## [5,] &quot;1625738400000&quot; &quot;32570.12000000&quot; &quot;32748.88000000&quot; &quot;32447.32000000&quot; ## [6,] &quot;1.625742e+12&quot; &quot;32486.43000000&quot; &quot;32744.89000000&quot; &quot;32077.00000000&quot; ## [,5] [,6] [,7] ## [1,] &quot;33096.72000000&quot; &quot;3536.85699100&quot; &quot;1625727599999&quot; ## [2,] &quot;32487.57000000&quot; &quot;7911.85857500&quot; &quot;1625731199999&quot; ## [3,] &quot;32570.53000000&quot; &quot;4128.84416800&quot; &quot;1625734799999&quot; ## [4,] &quot;32570.13000000&quot; &quot;2719.29978200&quot; &quot;1625738399999&quot; ## [5,] &quot;32486.42000000&quot; &quot;2354.44869800&quot; &quot;1625741999999&quot; ## [6,] &quot;32696.44000000&quot; &quot;5820.07833200&quot; &quot;1625745599999&quot; typeof(data) # check data type ## [1] &quot;character&quot; data &lt;- as.data.frame(data) # convert to dataframe head(data) ## V1 V2 V3 V4 V5 ## 1 1.625724e+12 32880.97000000 33512.53000000 32857.09000000 33096.72000000 ## 2 1625727600000 33096.85000000 33260.80000000 32242.07000000 32487.57000000 ## 3 1625731200000 32487.56000000 32618.25000000 32231.92000000 32570.53000000 ## 4 1625734800000 32570.54000000 32700.00000000 32425.20000000 32570.13000000 ## 5 1625738400000 32570.12000000 32748.88000000 32447.32000000 32486.42000000 ## 6 1.625742e+12 32486.43000000 32744.89000000 32077.00000000 32696.44000000 ## V6 V7 ## 1 3536.85699100 1625727599999 ## 2 7911.85857500 1625731199999 ## 3 4128.84416800 1625734799999 ## 4 2719.29978200 1625738399999 ## 5 2354.44869800 1625741999999 ## 6 5820.07833200 1625745599999 # fix columns names colnames(data) &lt;- c(&quot;Open_time&quot;, &quot;Open&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;, &quot;Volume&quot;, &quot;Close_time&quot;) head(data) # looks better, but columns are characters still ## Open_time Open High Low Close ## 1 1.625724e+12 32880.97000000 33512.53000000 32857.09000000 33096.72000000 ## 2 1625727600000 33096.85000000 33260.80000000 32242.07000000 32487.57000000 ## 3 1625731200000 32487.56000000 32618.25000000 32231.92000000 32570.53000000 ## 4 1625734800000 32570.54000000 32700.00000000 32425.20000000 32570.13000000 ## 5 1625738400000 32570.12000000 32748.88000000 32447.32000000 32486.42000000 ## 6 1.625742e+12 32486.43000000 32744.89000000 32077.00000000 32696.44000000 ## Volume Close_time ## 1 3536.85699100 1625727599999 ## 2 7911.85857500 1625731199999 ## 3 4128.84416800 1625734799999 ## 4 2719.29978200 1625738399999 ## 5 2354.44869800 1625741999999 ## 6 5820.07833200 1625745599999 is.numeric(data[,1]) # check 1st column type is numeric ## [1] FALSE is.numeric(data[,2]) # check 2nd column type is numeric ## [1] FALSE data &lt;- as.data.frame(sapply(data, as.numeric)) # convert all columns to numeric head(data) # good, its double now ## Open_time Open High Low Close Volume Close_time ## 1 1.625724e+12 32880.97 33512.53 32857.09 33096.72 3536.857 1.625728e+12 ## 2 1.625728e+12 33096.85 33260.80 32242.07 32487.57 7911.859 1.625731e+12 ## 3 1.625731e+12 32487.56 32618.25 32231.92 32570.53 4128.844 1.625735e+12 ## 4 1.625735e+12 32570.54 32700.00 32425.20 32570.13 2719.300 1.625738e+12 ## 5 1.625738e+12 32570.12 32748.88 32447.32 32486.42 2354.449 1.625742e+12 ## 6 1.625742e+12 32486.43 32744.89 32077.00 32696.44 5820.078 1.625746e+12 Final stage is to convert Open_time and Close_time to dates. data$Open_time &lt;- as.POSIXct(data$Open_time/1e3, origin = &#39;1970-01-01&#39;) data$Close_time &lt;- as.POSIXct(data$Close_time/1e3, origin = &#39;1970-01-01&#39;) head(data) ## Open_time Open High Low Close Volume ## 1 2021-07-08 09:00:00 32880.97 33512.53 32857.09 33096.72 3536.857 ## 2 2021-07-08 10:00:00 33096.85 33260.80 32242.07 32487.57 7911.859 ## 3 2021-07-08 11:00:00 32487.56 32618.25 32231.92 32570.53 4128.844 ## 4 2021-07-08 12:00:00 32570.54 32700.00 32425.20 32570.13 2719.300 ## 5 2021-07-08 13:00:00 32570.12 32748.88 32447.32 32486.42 2354.449 ## 6 2021-07-08 14:00:00 32486.43 32744.89 32077.00 32696.44 5820.078 ## Close_time ## 1 2021-07-08 09:59:59 ## 2 2021-07-08 10:59:59 ## 3 2021-07-08 11:59:59 ## 4 2021-07-08 12:59:59 ## 5 2021-07-08 13:59:59 ## 6 2021-07-08 14:59:59 tail(data) # check last records ## Open_time Open High Low Close Volume ## 95 2021-07-12 07:00:00 34447.92 34678.43 34290.00 34299.94 2014.26287 ## 96 2021-07-12 08:00:00 34299.93 34340.96 34160.39 34330.25 1480.59214 ## 97 2021-07-12 09:00:00 34328.70 34455.00 34207.95 34380.01 1217.81147 ## 98 2021-07-12 10:00:00 34380.00 34510.00 34213.55 34281.74 1930.33376 ## 99 2021-07-12 11:00:00 34281.74 34488.27 34213.16 34273.62 1703.52080 ## 100 2021-07-12 12:00:00 34273.62 34284.99 34233.92 34282.56 61.55017 ## Close_time ## 95 2021-07-12 07:59:59 ## 96 2021-07-12 08:59:59 ## 97 2021-07-12 09:59:59 ## 98 2021-07-12 10:59:59 ## 99 2021-07-12 11:59:59 ## 100 2021-07-12 12:59:59 4.8 Google Services 4.8.1 Spreadsheets THIS CHAPTER IS UNDER CONSTRUCTION / Working with Google Spreadsheets need account authorization. googlesheets4 is a package to work with Google Sheets from R. #install.packages(&quot;googlesheets4&quot;) library(googlesheets4) You can read google documents after authentification on google service. There is sample code: read_sheet(&quot;https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077&quot;) gs4_deauth() Lets read sample dataset gapminder. It detailed described in next paragraph. gs4_example(gapminder) 4.8.2 Trends Google Trends is a service for analyzing search requests by many filters like region (continent, country, locality), period (year, month), information category (business, education, hobby, healthcare), information type (news, shopping, video, images) https://trends.google.com/trends/ #install.packages(&#39;gtrendsR&#39;) #install.packages(&#39;ggplot2&#39;) library(gtrendsR) # loading package for Google Trends queries library(ggplot2) Lets configure out google trends query params keywords = c(&quot;Bitcoin-Kurs&quot;, &quot;FC Barcelona&quot;) # search keywords country = c(&#39;AT&#39;) # search region from https://support.google.com/business/answer/6270107?hl=en time = (&quot;2021-01-01 2021-05-17&quot;) # period channel = &#39;web&#39; # search channel: google search (&#39;news&#39; - google news, &#39;images&#39; - google images) # query trends = gtrends(keywords, gprop = channel, geo = country, time = time, tz = &quot;UTC&quot;) time_trend = trends$interest_over_time head(time_trend) # last 6 ## date hits keyword geo time gprop category ## 1 2021-01-01 0 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 ## 2 2021-01-02 8 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 ## 3 2021-01-03 8 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 ## 4 2021-01-04 7 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 ## 5 2021-01-05 0 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 ## 6 2021-01-06 0 Bitcoin-Kurs AT 2021-01-01 2021-05-17 web 0 tail(time_trend) # latest 6 ## date hits keyword geo time gprop category ## 269 2021-05-12 33 FC Barcelona AT 2021-01-01 2021-05-17 web 0 ## 270 2021-05-13 0 FC Barcelona AT 2021-01-01 2021-05-17 web 0 ## 271 2021-05-14 8 FC Barcelona AT 2021-01-01 2021-05-17 web 0 ## 272 2021-05-15 25 FC Barcelona AT 2021-01-01 2021-05-17 web 0 ## 273 2021-05-16 40 FC Barcelona AT 2021-01-01 2021-05-17 web 0 ## 274 2021-05-17 13 FC Barcelona AT 2021-01-01 2021-05-17 web 0 Lets visualize query results: plot &lt;- ggplot(data=time_trend, aes(x=date, y=hits, group=keyword, col=keyword)) + geom_line() + xlab(&#39;Time&#39;) + ylab(&#39;Relative Interest&#39;) + theme(legend.title = element_blank(), legend.position=&quot;bottom&quot;, legend.text=element_text(size=15)) + ggtitle(&quot;Google Search Volume&quot;) plot 4.9 SQL (SQLite sample) We are going to review working with database on SQLite, becouse it allows us not to install DB-server and start working with simple file. For now we will use RSQLite package. #install.packages(&quot;RSQLite&quot;) library(RSQLite) # let&#39;s use mtcars dataset data(&quot;mtcars&quot;) # loads the data head(mtcars) # preview the data ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # create new db file db_path = paste0(&quot;data/cars_.sqlite&quot;) # chage file name for new create connection # create connection conn &lt;- dbConnect(RSQLite::SQLite(), db_path, overwrite = TRUE, append = FALSE) # for lecture content only # Write the mtcars dataset into a table names mtcars_data dbWriteTable(conn, &quot;cars_table&quot;, mtcars) # List all the tables available in the database dbListTables(conn) ## [1] &quot;cars_table&quot; table_data &lt;- dbGetQuery(conn, &quot;SELECT * FROM cars_table&quot;) head(table_data) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # close connection dbDisconnect(conn) You can write complex queries for many tables if you knowledge of SQL allows. 4.10 Web-pages (HTML) "],["chapter5.html", " 5 5.    (    dplyr) ", "  5 5.    (    dplyr)  "],["chapter8.html", " 6 8.    .", "  6 8.    .     .    "],["chapter7.html", " 7 7.     ,    .", "  7 7.     ,    .     .    "],["chapter6.html", " 8      8.1  8.2  ", "  8                 8.1  8.1.1  8.1.1.1   ,   \\(y = (x+2)^2 + ln(x)\\),  \\(x\\)    100, 105, 110, ..., 200.     data.fame   \\(X\\)  \\(Y\\). 8.1.1.2   ,   \\(y = \\frac{\\sqrt{x+2}}{z}\\),  \\(x\\)    10, 15, 20, ..., 100,  \\(z\\) -     [-10, 10],      \\(x\\).     data.fame   \\(X\\), \\(Z\\)  \\(Y\\). 8.1.1.3       ,       .        [10,100).     10. 8.1.1.4     ,       ,     ,          .        [-100,100].     10. ,    x   : x &lt;- c(1, -5, 10, -8, -2, 5, 4, -9)      : ## [1] 1 10 5 4 -5 -8 -2 -9 8.1.1.5     \\(N\\) (  ).    . 8.1.1.6    .     ,      . 8.1.1.7        ,   .     :        ,     ;         . 8.1.1.8         \\(A\\),      \\(B\\). 8.1.1.9   ,        .        \\([1; 10)\\).    10. 8.1.1.10   ,      .        \\([100; 200]\\).       \\(7\\)-.  1.     \\(7\\)-    .  2.  ,   1  size ( )     . func.genMod7 &lt;- function() { x &lt;- 8 while(x %% 7 != 0) { x &lt;- sample(100:200, size = 1) } return(x) } func.genVectorMod7 &lt;- function(size) { v &lt;- c() for(i in 1:size) { v &lt;- c(v, func.genMod7()) } return(v) } vector &lt;- func.genVectorMod7(100) vector ## [1] 140 105 161 147 140 168 196 196 147 189 112 196 105 105 161 168 175 140 ## [19] 154 126 196 154 154 140 147 196 182 189 147 126 140 189 189 196 189 154 ## [37] 147 175 112 112 154 154 196 147 168 154 189 126 105 182 147 112 154 154 ## [55] 105 154 133 147 168 154 140 189 161 175 112 196 182 126 175 105 105 154 ## [73] 189 154 133 133 119 161 140 182 182 175 105 140 154 126 105 105 140 161 ## [91] 161 126 112 175 168 182 105 182 133 154 8.1.1.11   ,          ,    min()  max().        \\([10;50]\\). 8.1.1.12   ,          ,    min()  max().        \\([10;50]\\). 8.1.1.13 *  ,          . , a &lt;- 10  b &lt;- 25,         : print(a) ## [1] 25 print(b) ## [1] 10 8.1.1.14   ,  8.1.1.15     kaggle.com     (https://www.kaggle.com/ajaypalsinghlo/world-happiness-report-2021).    R. 8.1.2  8.1.2.1   ,      , , ,   .        (list). 8.2   8.2.1       6.1.1.3: x &lt;- sample(10:100, size = 10) for(j in 1:(length(x)-1)) { for(i in 1:(length(x)-1)) { if(x[i] &gt; x[i+1]) { tmp = x[i] x[i] = x[i+1] x[i+1] = tmp } } } print(x) ## [1] 12 14 38 49 54 59 72 78 94 99    6.1.1.4: x &lt;- sample(-100:100, size = 10) print(&quot;Vector before sort:&quot;) ## [1] &quot;Vector before sort:&quot; print(x) ## [1] 37 1 -85 56 -42 -27 28 -67 -19 45 for(j in 1:(length(x)-1)) { for(i in 1:(length(x)-1)) { if(x[i] &lt; 0 &amp; x[i+1] &gt; 0) { tmp = x[i] x[i] = x[i+1] x[i+1] = tmp } } } print(&quot;Vector after sort:&quot;) ## [1] &quot;Vector after sort:&quot; print(x) ## [1] 37 1 56 28 45 -85 -42 -27 -67 -19    6.1.1.5: #number &lt;- as.numeric(readline(prompt = &quot; :&quot;)) number &lt;- 15783 sum &lt;- 0 while(number &gt; 0) { last_digit = number %% 10 sum = sum + last_digit number = (number - last_digit) / 10 print(paste0(&quot;Number: &quot;, number, &quot; | Sum: &quot;, sum, &quot; | Last: &quot;, last_digit)) } ## [1] &quot;Number: 1578 | Sum: 3 | Last: 3&quot; ## [1] &quot;Number: 157 | Sum: 11 | Last: 8&quot; ## [1] &quot;Number: 15 | Sum: 18 | Last: 7&quot; ## [1] &quot;Number: 1 | Sum: 23 | Last: 5&quot; ## [1] &quot;Number: 0 | Sum: 24 | Last: 1&quot;    6.1.1.9 ( 1): x &lt;- sample(1:10, size = 4, replace = T) x ## [1] 6 6 7 1 x_parni &lt;- c() for(i in 1:length(x)) { if(x[i] %% 2 == 0) { x_parni &lt;- c(x_parni, x[i]) } } mean(x_parni) ## [1] 6    6.1.1.9 ( 2): x &lt;- sample(1:10, size = 10, replace = T) x ## [1] 2 10 3 7 3 10 4 8 3 9 sum &lt;- 0 count &lt;- 0 for(i in 1:length(x)) { if(x[i] %% 2 == 0) { sum = sum + x[i] count = count + 1 } } mean_value = sum / count mean_value ## [1] 6.8 8.2.2     6.1.2.1: x &lt;- sample(10:100, size = 10) print(x) ## [1] 58 72 66 61 42 96 70 34 53 37 vector.info &lt;- function(vector) { x &lt;- list() x$Sum &lt;- sum(vector) x$Mean &lt;- mean(vector) x$Median &lt;- median(vector) x$Min &lt;- min(vector) x$Max &lt;- max(vector) return(x) } vector.info(x) ## $Sum ## [1] 589 ## ## $Mean ## [1] 58.9 ## ## $Median ## [1] 59.5 ## ## $Min ## [1] 34 ## ## $Max ## [1] 96 Sys.setlocale(&quot;LC_CTYPE&quot;, &quot;ukrainian&quot;) "],["-e-.html", "e", " e "]]
